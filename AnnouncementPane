package debback2;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Backgammon {

	private static JTextField textField;
	private static JTextField textField_1;
	private static JTextField textField_2;
	public static int DICE_ROLL_1;
	public static int DICE_ROLL_2;
	public static int AssignColor;
	public static int INDEX;

	public static String FIRST_PLAYER;
	public static String SECOND_PLAYER;
	public static int FLAG = 0;
	public static int FLAG2 = 0;
	public static int win = -1;

	public interface MenuItemPainter {

		public void paint(Graphics2D g2d, String text, Rectangle bounds, boolean isSelected, boolean isFocused);

		public Dimension getPreferredSize(Graphics2D g2d, String text);

	}

	private static JFrame frame3;

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		JFrame frame = new JFrame(); // frame for the board
		JFrame frame2 = new JFrame(); // frame for the start screen
		JFrame frame3 = new JFrame(); // frame for the screen to add player inputs

		InfoPanel infoPanel = new InfoPanel(); // creates an object of infopanel to add the infopanel in the board
		infoPanel.addText("WELCOME TO BACKGAMMON"); // gets printed on the infopanel

		CommandPanel commandPanel = new CommandPanel();// creates an object of commandpanel to add the commmandpanel in
														// the board
		frame.setBounds(0, 0, 1145, 500);
		Board b = new Board();

		frame.revalidate();
		frame.repaint();

		frame3.setBounds(100, 100, 730, 489);
		frame3.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame3.getContentPane().setLayout(null);

		textField = new JTextField();
		textField.setBounds(128, 28, 86, 20);
		frame3.getContentPane().add(textField); // a new textfield is created to take inputs from Player 1
		textField.setColumns(10);

		JLabel lblName = new JLabel("Player 1:");
		lblName.setBounds(65, 31, 56, 14);
		frame3.getContentPane().add(lblName);

		JLabel lblPhone = new JLabel("Player 2:");
		lblPhone.setBounds(65, 68, 56, 14);
		frame3.getContentPane().add(lblPhone);

		textField_1 = new JTextField(); // a new textfield is created to take inputs from Player 2
		textField_1.setBounds(128, 65, 86, 20);
		frame3.getContentPane().add(textField_1);
		textField_1.setColumns(10);

		JButton btnSubmit = new JButton("submit"); // a submit button is added

		btnSubmit.setBackground(Color.BLUE);
		btnSubmit.setForeground(Color.MAGENTA);
		btnSubmit.setBounds(65, 387, 89, 23);
		frame3.getContentPane().add(btnSubmit);

		btnSubmit.addActionListener(new ActionListener() { // An action listener is added to the submit button
			public void actionPerformed(ActionEvent arg0) {
				System.out.println(arg0.getActionCommand());
				if (textField.getText().isEmpty() || (textField_1.getText().isEmpty())) {
					JOptionPane.showMessageDialog(null, "Data Missing"); // If the fields are empty, it shows data is
																			// missing
				} else if (textField.getText().equalsIgnoreCase(textField_1.getText())) {
					JOptionPane.showMessageDialog(null, "Both Player Names cannot be the same"); // If both the fields
																									// are same, it
																									// displays an error
																									// message
				} else {
					frame.setVisible(true); // displays the board
					frame.repaint();
					frame.revalidate();
					frame2.setVisible(false); // removes the start screen
					frame2.repaint();
					frame2.revalidate();
					frame3.setVisible(false); // removes the screen to add the inputs
					frame3.repaint();
					frame3.revalidate();

				}
				FLAG2++;
				System.out.println("gg");

				String name_1 = textField.getText(); // gets the text from Player 1's input
				String name_2 = textField_1.getText(); // gets the text from Player2's input
				infoPanel.addText("Player1 : " + " " + name_1); // displays the name
				infoPanel.addText("player2 : " + " " + name_2);

				System.out.println("gg");
				// compares the dice values and prints instructions accordingly
				if (DICE_ROLL_1 > DICE_ROLL_2) {
					infoPanel.addText(name_1 + " --> " + "Grey");
					infoPanel.addText(name_2 + " --> " + " Green");
					infoPanel.addText("To begin the game enter any letter in the inputfield provided");
					String message = name_1 + " " + "makes the first move";
					infoPanel.addText(message);
					FIRST_PLAYER = name_1;
					SECOND_PLAYER = name_2;
					frame.add(infoPanel, BorderLayout.EAST);
				}
				if (DICE_ROLL_2 > DICE_ROLL_1) {
					infoPanel.addText(name_2 + " --> " + "Grey");
					infoPanel.addText(name_1 + " --> " + " Green");
					infoPanel.addText("To begin the game enter any letter in the inputfield provided");
					String message = name_2 + " " + "makes the first move";
					infoPanel.addText(message);
					FIRST_PLAYER = name_2;
					SECOND_PLAYER = name_1;
					frame.add(infoPanel, BorderLayout.EAST);
				}

			};

		});

		frame.setVisible(true);
		EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				try {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
				} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
						| UnsupportedLookAndFeelException ex) {
					ex.printStackTrace();
				}

				frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame2.add(new AnnouncementPane(frame, frame2, frame3));
				frame2.pack();
				frame2.setLocationRelativeTo(null);
				frame2.setVisible(true);
			}
		});

		System.out.println("ye");
		frame.add(infoPanel, BorderLayout.EAST);
		frame.add(commandPanel, BorderLayout.SOUTH);
		frame.setResizable(false);

		frame.revalidate();
		frame.repaint();

		int flag = 2;
		String get = " ";
		do {
			INDEX = 0;
			String message_1 = FIRST_PLAYER + "'s turn:";
			String message_2 = SECOND_PLAYER + "'s turn:";

			if (flag % 2 == 0) {
				if (flag != 2)
					infoPanel.addText(message_1);
			} else {
				infoPanel.addText(message_2);
				INDEX = 1;
			}

			Random randi = new Random();
			Random randy = new Random();

			int r1 = randi.nextInt(6) + 1;
			int r2 = randy.nextInt(6) + 1;

			if (FLAG == 0) {
				while (r1 == r2) {
					r1 = randi.nextInt(6) + 1;
					r2 = randy.nextInt(6) + 1;
				}
			}

			TurnMove tut = new TurnMove(INDEX, r1, r2, 0); // creates a new object of the class turnmove
			frame.add(tut); // adds it to the board
			int roll_1 = tut.getChoice();
			int roll_2 = tut.getChoice2();
			DICE_ROLL_1 = roll_1; // values of dice1
			DICE_ROLL_2 = roll_2; // values of dice2

			frame.validate();

			Game g = new Game();
			int arr[][];
			arr = g.getARR();

			FLAG++;

			int next_move = 0;

			// If the dices are equal

			if (roll_1 == roll_2) {

				for (int d = 0; d < 4; d++) {
					int hy = 1;
					int hen = 24;
					int sumen = 0;
					int sumy = 0;

					for (int i = 1; i <= 6; i++) {
						sumy = sumy + arr[0][i];
					}
					for (int j = 19; j <= 24; j++) {
						sumen = sumen + arr[1][j];
					}

					if (sumy == 15) {
						hy = 0;
					}
					if (sumen == 15) {
						hy = 25;
					}
					String st[] = { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
							"", "", "", "", "" };
					int s = 0;
					if (INDEX == 0) {

						for (int x = 1; x <= 25; x++) {
							if (arr[0][x] > 0) {
								for (int m = 1; m <= 4 - d; m++) {
									if (x - (roll_1 * m) >= hy) {
										if (hy == 0 && x - (roll_1 * m) == 0) {
											st[s] = Integer.toString(x) + " " + "Off";
											s++;
										} else {

											if (arr[1][x - (roll_1 * m)] == 0) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - (roll_1 * m));
													s++;
												} else {
													st[s] = Integer.toString(x) + " "
															+ Integer.toString(x - (roll_1 * m));
													s++;
												}
											}

											else if (arr[1][x - (roll_1 * m)] == 1) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - (roll_1 * m)) + "*";
													s++;
												} else {
													st[s] = Integer.toString(x) + " "
															+ Integer.toString(x - (roll_1 * m)) + "*";
													s++;
												}
											}
										}
									}
								}

							}
						}
					} else {
						for (int x = 24; x > 0; x--) {

							if (arr[1][x] > 0) {
								for (int n = 1; n <= 4 - d; n++) {
									if (x + (roll_1 * n) <= hen) {
										if (hen == 25 && x + (roll_1 * n) == 25) {
											st[s] = Integer.toString(25 - x) + " " + "Off";
											s++;
										} else {
											if (arr[0][x + (roll_1 * n)] == 0) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + (roll_1 * n)));
												s++;
											} else if (arr[0][x + (roll_1 * n)] == 1) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + (roll_1 * n))) + "*";
												s++;
											}
										}
									}
								}

							}

						}

						if (arr[1][25] > 0) {
							for (int k = 1; k <= 4 - d; k++) {
								if (roll_1 * k <= 24) {
									if (arr[0][roll_1 * k] == 0) {
										st[s] = "Bar " + Integer.toString(25 - (roll_1 * k));
										s++;
									} else if (arr[0][roll_1 * k] == 1) {
										st[s] = "Bar " + Integer.toString(25 - (roll_1 * k)) + "*";
										s++;
									}

								}

							}
						}
					}

					if (s == 0) {
						infoPanel.addText("There are no moves available---CHANCE SKIPS!!");
						break;

					}

					// Adds all the possible moves in the info panel
					char c = 'A';
					if (d == 0) {
						for (int y = 0; y < s; y++) {
							infoPanel.addText(c + ": " + st[y]);
							c++;
						}
					}
					int start_pip;
					int end_pip;

					do {
						if (d != 0) {
							infoPanel.addText("Enter the next move from the given possible moves");
							c = 'A';
							for (int y = 0; y < s; y++) {
								infoPanel.addText(c + ": " + st[y]);
								c++;
							}
						}
						String move1 = commandPanel.getCommand();
						if (move1.equalsIgnoreCase("Quit")) { // If the user enters quit, the entire program closes

							frame.dispose();
							frame2.dispose();
							frame3.dispose();
							System.exit(0);

						}

						char alpha1 = move1.charAt(0);
						int arrnum1 = 0;

						if (alpha1 >= 65 && alpha1 <= 90)
							arrnum1 = alpha1 - 65;
						else if (alpha1 >= 97 && alpha1 <= 122)
							arrnum1 = alpha1 - 97;

						if (arrnum1 >= s) {
							infoPanel.addText("Enter move again");
							continue;
						}

						String m = st[arrnum1];
						if (m.charAt(m.length() - 1) == '*')
							m = m.substring(0, m.length() - 1);

						int space_INDEX = m.indexOf(' ');
						String first_move = m.substring(0, space_INDEX);
						String second_move = m.substring(space_INDEX + 1);

						if (first_move.equalsIgnoreCase("Bar")) {
							start_pip = 25;
							end_pip = Integer.parseInt(m.substring(space_INDEX + 1));
						} else if (second_move.equalsIgnoreCase("Off")) {
							start_pip = Integer.parseInt(m.substring(0, space_INDEX));
							end_pip = 0;
						} else {
							start_pip = Integer.parseInt(m.substring(0, space_INDEX));
							end_pip = Integer.parseInt(m.substring(space_INDEX + 1));
						}

						if (INDEX == 1) {
							start_pip = 25 - start_pip;
							end_pip = 25 - end_pip;
						}

						Game game1 = new Game(start_pip, end_pip);
						if (game1.isValid(INDEX) == true)
							break;
						else
							infoPanel.addText("Enter move again");

					} while (true);
					if (INDEX == 0) {
						if (start_pip - end_pip == (roll_1 * 2))
							d = d + 1;
						else if (start_pip - end_pip == (roll_1 * 3))
							d = d + 2;
						else if (start_pip - end_pip == (roll_1 * 4))
							d = d + 3;
					} else {
						if (end_pip - start_pip == (roll_1 * 2))
							d = d + 1;
						else if (end_pip - start_pip == (roll_1 * 3))
							d = d + 2;
						else if (end_pip - start_pip == (roll_1 * 4))
							d = d + 3;
					}

					Game game = new Game();

					if (start_pip > end_pip) {
						for (int i = start_pip; i > end_pip; i--) {

							int ar[][] = game.getARR();
							if (end_pip != 0 && ar[1][end_pip] > 0)
								game.updateArray(1, end_pip, 25);
							game.updateArray(INDEX, i, i - 1);
							Checker check = new Checker(INDEX);

							frame.add(check);
							frame.validate();
						}
					} else {
						for (int i = start_pip; i < end_pip; i++) {

							int ar[][] = game.getARR();
							if (end_pip == 25) {
								if (start_pip == 24) {
									game.updateArray(INDEX, 24, 0);
									i++;
								}
							}
							if (i == 0) {
								game.updateArray(INDEX, 25, i + 1);
								i++;
							}
							if (end_pip != 25 && ar[0][end_pip] > 0)
								game.updateArray(0, end_pip, 25);
							if (i < end_pip)
								game.updateArray(INDEX, i, i + 1);
							Checker check = new Checker(INDEX);
							frame.add(check);
							frame.validate();
						}
					}
					int ta[][] = game.getARR();
					if (ta[0][0] == 15) {
						win = 0;
						break;
					}
					if (ta[1][0] == 15) {
						win = 1;
						break;
					}
				}
				if (win == 1 || win == 0)
					break;
			} else {

				for (int z = 0; z < 2; z++) {
					int hy = 1;
					int hen = 24;
					int sumen = 0;
					int sumy = 0;

					for (int i = 0; i <= 6; i++) {
						sumy = sumy + arr[0][i];
					}
					for (int j = 19; j <= 24; j++) {
						sumen = sumen + arr[1][j];
					}

					sumen = sumen + arr[1][0];

					if (sumy == 15) {
						hy = 0;
					}
					if (sumen == 15) {
						hy = 25;
					}

					String st[] = { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
							"", "", "", "", "" };
					int s = 0;
					if (INDEX == 0) {

						for (int x = 1; x <= 25; x++) {
							if (z == 0) {
								if (arr[0][x] > 0) {

									if (x - roll_1 >= hy) {
										if (hy == 0 && x - roll_1 == 0) {
											st[s] = Integer.toString(x) + " " + "Off";
											s++;
										} else {

											if (arr[1][x - roll_1] == 0) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - roll_1);
													s++;
												} else {
													st[s] = Integer.toString(x) + " " + Integer.toString(x - roll_1);
													s++;
												}
											}

											else if (arr[1][x - roll_1] == 1) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - roll_1) + "*";
													s++;
												} else {
													st[s] = Integer.toString(x) + " " + Integer.toString(x - roll_1)
															+ "*";
													s++;
												}
											}
										}
									}

									if (x - roll_2 >= hy) {
										if (hy == 0 && x - roll_2 == 0) {
											st[s] = Integer.toString(x) + " " + "Off";
											s++;
										} else {

											if (arr[1][x - roll_2] == 0) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - roll_2);
													s++;
												} else {
													st[s] = Integer.toString(x) + " " + Integer.toString(x - roll_2);
													s++;
												}
											}

											else if (arr[1][x - roll_2] == 1) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - roll_2) + "*";
													s++;
												} else {
													st[s] = Integer.toString(x) + " " + Integer.toString(x - roll_2)
															+ "*";
													s++;
												}
											}
										}
									}

									if (x - roll_1 - roll_2 >= hy) {
										if (hy == 0 && x - roll_1 - roll_2 == 0) {
											st[s] = Integer.toString(x) + " " + "Off";
											s++;
										} else {
											if (arr[1][x - roll_1 - roll_2] == 0) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - roll_1 - roll_2);
													s++;
												} else {
													st[s] = Integer.toString(x) + " "
															+ Integer.toString(x - roll_1 - roll_2);
													s++;
												}
											} else if (arr[1][x - roll_1 - roll_2] == 1) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - roll_1 - roll_2) + "*";
													s++;
												} else {
													st[s] = Integer.toString(x) + " "
															+ Integer.toString(x - roll_1 - roll_2) + "*";
													s++;
												}
											}
										}

									}
								}
							} else if (z == 1) {
								if (arr[0][x] > 0) {
									if (x - next_move >= hy) {
										if (hy == 0 && x - next_move == 0) {
											st[s] = Integer.toString(x) + " " + "Off";
											s++;
										} else {
											if (arr[1][x - next_move] == 0) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - next_move);
													s++;
												} else {
													st[s] = Integer.toString(x) + " " + Integer.toString(x - next_move);
													s++;
												}
											} else if (arr[1][x - next_move] == 1) {
												if (x == 25) {
													st[s] = "Bar " + Integer.toString(x - next_move) + "*";
													s++;
												} else {
													st[s] = Integer.toString(x) + " " + Integer.toString(x - next_move)
															+ "*";
													s++;
												}
											}
										}
									}
								}
							}
						}
					} else {
						for (int x = 24; x > 0; x--) {
							if (z == 0) {

								if (arr[1][x] > 0) {
									if (x + roll_1 <= hen) {
										if (hen == 25 && x + roll_1 == 25) {
											st[s] = Integer.toString(25 - x) + " " + "Off";
											s++;
										} else {
											if (arr[0][x + roll_1] == 0) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + roll_1));
												s++;
											} else if (arr[0][x + roll_1] == 1) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + roll_1)) + "*";
												s++;
											}
										}
									}

									if (x + roll_2 <= hen) {
										if (hen == 25 && x + roll_2 == 25) {
											st[s] = Integer.toString(25 - x) + " " + "Off";
											s++;
										} else {
											if (arr[0][x + roll_2] == 0) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + roll_2));
												s++;
											} else if (arr[0][x + roll_2] == 1) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + roll_2)) + "*";
												s++;
											}
										}
									}
									if (x + roll_2 + roll_1 <= hen) {
										if (hen == 25 && x + roll_1 + roll_2 == 25) {
											st[s] = Integer.toString(25 - x) + " " + "Off";
											s++;
										} else {
											if (arr[0][x + roll_2 + roll_1] == 0) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + roll_2 + roll_1));
												s++;
											} else if (arr[0][x + roll_1 + roll_2] == 1) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + roll_2 + roll_1)) + "*";
												s++;
											}
										}
									}
								}
							} else if (z == 1) {
								if (arr[1][x] > 0) {

									if (x + next_move <= hen) {
										if (hen == 25 && x + next_move == 25) {
											st[s] = Integer.toString(25 - x) + " " + "Off";
											s++;
										} else {
											if (arr[0][x + next_move] == 0) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + next_move));
												s++;
											} else if (arr[0][x + next_move] == 1) {
												st[s] = Integer.toString(25 - x) + " "
														+ Integer.toString(25 - (x + next_move)) + "*";
												s++;
											}
										}
									}
								}
							}
						}
						if (z == 0) {

							if (arr[1][25] > 0) {
								if (roll_1 <= 24) {
									if (arr[0][roll_1] == 0) {
										st[s] = "Bar " + Integer.toString(25 - roll_1);
										s++;
									} else if (arr[0][roll_1] == 1) {
										st[s] = "Bar " + Integer.toString(25 - roll_1) + "*";
										s++;
									}
								}

								if (roll_2 <= 24) {
									if (arr[0][roll_2] == 0) {
										st[s] = "Bar " + Integer.toString(25 - roll_2);
										s++;
									} else if (arr[0][roll_2] == 1) {
										st[s] = "Bar " + Integer.toString(25 - roll_2) + "*";
										s++;
									}
								}
								if (roll_2 + roll_1 <= 24) {
									if (arr[0][roll_2 + roll_1] == 0) {
										st[s] = "Bar " + Integer.toString(25 - (roll_2 + roll_1));
										s++;
									} else if (arr[0][roll_1 + roll_2] == 1) {
										st[s] = "Bar " + Integer.toString(25 - (roll_2 + roll_1)) + "*";
										s++;
									}
								}
							}
						} else if (z == 1) {
							if (arr[1][25] > 0) {
								if (next_move <= 24) {
									if (arr[0][next_move] == 0) {
										st[s] = "Bar " + Integer.toString(25 - next_move);
										s++;
									} else if (arr[0][next_move] == 1) {
										st[s] = "Bar " + Integer.toString(25 - next_move) + "*";
										s++;
									}
								}
							}
						}

					}

					String beg;
					if (FLAG2 == 0) {
						beg = commandPanel.getCommand();
					}
					if (s == 0) {
						infoPanel.addText("There are no moves available---CHANCE SKIPS!!");
						break;

					}
					char c = 'A';
					if (z == 0) {
						for (int y = 0; y < s; y++) {
							infoPanel.addText(c + ": " + st[y]);
							c++;
						}
					}
					int start_pip;
					int end_pip;
					System.out.println("ff");

					do {
						if (z == 1) {
							infoPanel.addText("Enter the second move from the given possible moves");
							c = 'A';
							for (int y = 0; y < s; y++) {
								infoPanel.addText(c + ": " + st[y]);
								c++;
							}
						}

						String move = commandPanel.getCommand();

						if (move.equalsIgnoreCase("Quit")) {

							frame.dispose();
							frame2.dispose();
							frame3.dispose();
							System.exit(0);

						}

						char alpha = move.charAt(0);
						int arrnum = 0;

						if (alpha >= 65 && alpha <= 90)
							arrnum = alpha - 65;
						else if (alpha >= 97 && alpha <= 122)
							arrnum = alpha - 97;

						if (arrnum >= s) {
							infoPanel.addText("Enter move again");
							continue;
						}

						String m = st[arrnum];
						if (m.charAt(m.length() - 1) == '*')
							m = m.substring(0, m.length() - 1);

						int space_INDEX = m.indexOf(' ');

						String first_move = m.substring(0, space_INDEX);
						String second_move = m.substring(space_INDEX + 1);

						if (first_move.equalsIgnoreCase("Bar")) {
							start_pip = 25;
							end_pip = Integer.parseInt(m.substring(space_INDEX + 1));
						} else if (second_move.equalsIgnoreCase("Off")) {
							start_pip = Integer.parseInt(m.substring(0, space_INDEX));
							end_pip = 0;
						} else {
							start_pip = Integer.parseInt(m.substring(0, space_INDEX));
							end_pip = Integer.parseInt(m.substring(space_INDEX + 1));
						}

						if (INDEX == 1) {
							start_pip = 25 - start_pip;
							end_pip = 25 - end_pip;
						}

						if (INDEX == 0 && z == 1 && next_move != start_pip - end_pip) {
							infoPanel.addText("Not a valid move");
							continue;
						} else if (INDEX == 1 && z == 1 && next_move != end_pip - start_pip) {
							infoPanel.addText("Not a valid move");
							continue;
						}
						Game game1 = new Game(start_pip, end_pip);
						if (game1.isValid(INDEX) == true)
							break;
						else
							infoPanel.addText("Enter move again");

					} while (true);
					if (INDEX == 0) {
						if (start_pip - end_pip == roll_1)
							next_move = roll_2;
						else if (start_pip - end_pip == roll_2)
							next_move = roll_1;
						else if (start_pip - end_pip == roll_1 + roll_2)
							z++;
					} else {
						if (end_pip - start_pip == roll_1)
							next_move = roll_2;
						else if (end_pip - start_pip == roll_2)
							next_move = roll_1;
						else if (end_pip - start_pip == roll_1 + roll_2)
							z++;
					}

					Game game = new Game();

					System.out.println("INDEX is " + INDEX);
					if (start_pip > end_pip) {
						for (int i = start_pip; i > end_pip; i--) {

							int ar[][] = game.getARR();
							if (end_pip != 0 && ar[1][end_pip] > 0)
								game.updateArray(1, end_pip, 25);
							game.updateArray(INDEX, i, i - 1);
							Checker check = new Checker(INDEX);

							frame.add(check);
							frame.validate();
						}
					} else {
						for (int i = start_pip; i < end_pip; i++) {

							int ar[][] = game.getARR();
							if (end_pip == 25) {
								if (start_pip == 24) {
									game.updateArray(INDEX, 24, 0);
									i++;
								}
							}
							if (i == 0) {
								game.updateArray(INDEX, 25, i + 1);
								i++;
							}
							if (end_pip != 25 && ar[0][end_pip] > 0)
								game.updateArray(0, end_pip, 25);
							if (i < end_pip)
								game.updateArray(INDEX, i, i + 1);
							Checker check = new Checker(INDEX);
							frame.add(check);
							frame.validate();
						}

					}
					int ta[][] = game.getARR();
					if (ta[0][0] == 15) {
						win = 0;
						break;
					}
					if (ta[1][0] == 15) {
						win = 1;
						break;
					}

				}
				if (win == 1 || win == 0)
					break;

			}
			flag++;

			infoPanel.addText("Enter next/cheat/quit for the other player's turn");
			get = commandPanel.getCommand();
			Game gg = new Game(9, 9);
			int arrr[][] = gg.getARR();

			if (get.equalsIgnoreCase("Quit")) {

				frame.dispose();
				frame2.dispose();
				frame3.dispose();
				System.exit(0);

			}
			if (get.equalsIgnoreCase("cheat")) {

				for (int i = 0; i <= 24; i++) {
					if (arrr[0][i] > 0) {
						int mm = arrr[0][i];
						for (int k = 1; k <= mm; k++) {
							gg.updateArray(0, i, 25);

						}
					}
				}

				for (int j = 1; j <= 5; j++) {
					gg.updateArray(0, 25, j);
					gg.updateArray(0, 25, j);
				}
				gg.updateArray(0, 25, 0);
				gg.updateArray(0, 25, 0);

				for (int x = 0; x <= 24; x++) {
					if (arrr[1][x] > 0) {
						int mm = arrr[1][x];
						for (int k = 1; k <= mm; k++) {
							gg.updateArray(1, x, 25);

						}
					}
				}
				for (int y = 21; y <= 24; y++) {
					if (y != 23) {
						gg.updateArray(1, 25, y);
						gg.updateArray(1, 25, y);
						gg.updateArray(1, 25, y);
					}
				}
				gg.updateArray(1, 25, 0);
				gg.updateArray(1, 25, 0);
				gg.updateArray(1, 25, 0);
				get = "next";
			}

		} while (get.equalsIgnoreCase("next"));

		// declares the winner

		if (win == 1)
			infoPanel.addText("Winner in Green");
		else if (win == 0)
			infoPanel.addText("Winner in Grey");

		frame.revalidate();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		frame.revalidate();
		frame.repaint();

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Backgammon window = new Backgammon();
					// window.frame3.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});

	}
}


						
